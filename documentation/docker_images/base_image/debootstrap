#!/usr/bin/env bash
set -e

mkimgdeb="$(basename "$0")"
mkimg="$(dirname "$0").sh"

usage() {
	echo >&2 "usage: $mkimgdeb rootfsDir suite [debootstrap-args]"
	echo >&2 " note: $mkimgdeb meant to be used from $mkimg"
	exit 1
}

rootfsDir="$1"
if [ -z "$rootfsDir" ]; then
	echo >&2 "error: rootfsDir is missing"
	echo >&2
	usage
fi
shift

# we have to do a little fancy footwork to make sure "rootfsDir" becomes the second non-option argument to debootstrap

before=()
while [ $# -gt 0 ] && [[ "$1" == -* ]]; do
	before+=( "$1" )
	shift
done

suite="$1"
if [ -z "$suite" ]; then
	echo >&2 "error: suite is missing"
	echo >&2
	usage
fi
shift

FRESH_START="$1"
if [ -z "$FRESH_START" ]; then
	FRESH_START=n
fi
shift

GITHUB_PAT="$1"
if [ -z "$GITHUB_PAT" ]; then
	GITHUB_PAT=n
fi
shift

# get path to "chroot" in our current PATH
chrootPath="$(type -P chroot || :)"
if [ -z "$chrootPath" ]; then
	echo >&2 "error: chroot not found. Are you root?"
	echo >&2
	usage
fi

mount_paths(){
	echo "START => mount_paths"
	sudo mount --bind /dev     ${rootfsDir}/dev
	sudo mount --bind /dev/pts ${rootfsDir}/dev/pts
	sudo mount --bind /proc    ${rootfsDir}/proc
	sudo mount --bind /sys     ${rootfsDir}/sys
}

unmount_paths(){
	echo "START => unmount_paths"
	sudo mount | grep -qs ${rootfsDir}/dev 	    && sudo umount -lf ${rootfsDir}/dev
	sudo mount | grep -qs ${rootfsDir}/dev/pts  && sudo umount -lf ${rootfsDir}/dev/pts
	sudo mount | grep -qs ${rootfsDir}/proc     && sudo umount -lf ${rootfsDir}/proc
	sudo mount | grep -qs ${rootfsDir}/sys      && sudo umount -lf ${rootfsDir}/sys
}

rootfs_chroot() {
	# "chroot" doesn't set PATH, so we need to set it explicitly to something our new debootstrap chroot can use appropriately!
	# set PATH and chroot away!
	mount_paths && PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' LANGUAGE=en_US.UTF-8 LANG=en_US.UTF-8 LC_ALL=en_US.UTF-8 \
		"$chrootPath" "$rootfsDir" "$@" && unmount_paths
		
}

if [ "$FRESH_START" == y ] ; then
	echo "Downloading base system START"
	# allow for DEBOOTSTRAP=qemu-debootstrap ./mkimage.sh ...
	: ${DEBOOTSTRAP:=debootstrap}
	(
		set -x
		$DEBOOTSTRAP --arch=amd64 "${before[@]}" "$suite" "$rootfsDir" "$@"
	)
	echo "Downloading base system DONE"
fi

# now for some Docker-specific tweaks
# prevent init scripts from running during install/update
echo >&2 "+ echo exit 101 > '$rootfsDir/usr/sbin/policy-rc.d'"
cat > "$rootfsDir/usr/sbin/policy-rc.d" <<-'EOF'
	#!/bin/sh

	# For most Docker users, "apt-get install" only happens during "docker build",
	# where starting services doesn't work and often fails in humorous ways. This
	# prevents those failures by stopping the services from attempting to start.

	exit 101
EOF
chmod +x "$rootfsDir/usr/sbin/policy-rc.d"

## Copy new configuration files
## Assume yes answer for apt operations.
cp "$rootfsDir/../../configs/etc/apt/apt.conf.d/10-assume_yes" "$rootfsDir/etc/apt/apt.conf.d/10-assume_yes"
cp "$rootfsDir/../../configs/etc/resolv.conf" "$rootfsDir/etc/resolv.conf"

cp "$rootfsDir/../../configs/root/.my.cnf" "$rootfsDir/root/.my.cnf"
chmod 0600 "$rootfsDir/root/.my.cnf"

cat > "$rootfsDir/etc/hosts" << '__EOS__'
127.0.0.1	localhost
127.0.0.1	doom
::1			localhost ip6-localhost ip6-loopback
ff02::1		ip6-allnodes
ff02::2		ip6-allrouters
__EOS__

cat > "$rootfsDir/etc/apt/sources.list" << '__EOS__'
#------------------------------------------------------------------------------#
#                   OFFICIAL DEBIAN REPOS                    
#------------------------------------------------------------------------------#

###### Debian Main Repos
deb https://deb.debian.org/debian/ stable main
deb-src https://deb.debian.org/debian/ stable main

deb https://deb.debian.org/debian/ stable-updates main
deb-src https://deb.debian.org/debian/ stable-updates main
__EOS__

## Example: https://gist.github.com/takumin/952b5144e7b6466c6006
( rootfs_chroot /bin/sh << '__EOS__'
	#!/bin/sh

	set -e

	export HOME=/root


	export GIT_SSL_NO_VERIFY=1
	export DEBIAN_FRONTEND=noninteractive
	export DEBIAN_PRIORITY=critical
	export DEBCONF_NONINTERACTIVE_SEEN=true

	# locale
	echo "===> INSTALLATION preperation: installing locales START"
	apt-get clean && apt-get update && apt-get install -y locales
	locale-gen "en_US.UTF-8"
	dpkg-reconfigure locales

	echo 'locales locales/locales_to_be_generated    multiselect en_US.UTF-8 UTF-8' | debconf-set-selections
	echo 'locales locales/default_environment_locale select      en_US.UTF-8'       | debconf-set-selections

	apt-get install -y locales

	echo "LC_ALL=en_US.UTF-8" | tee -a /etc/environment
	sed -i 's/^# *\(en_US.UTF-8\)/\1/' /etc/locale.gen
	echo "LANG=en_US.UTF-8" | tee -a /etc/locale.conf

	locale-gen

	# Export env vars
	echo "export LC_ALL=en_US.UTF-8" >> ~/.bashrc
	echo "export LANG=en_US.UTF-8" >> ~/.bashrc
	echo "export LANGUAGE=en_US.UTF-8" >> ~/.bashrc

	export LANGUAGE=en_US.UTF-8
	export LANG=en_US.UTF-8
	export LC_CTYPE=en_US.UTF-8
	export LC_ALL=en_US.UTF-8

	echo "===> INSTALLATION preperation: installing locales DONE"


	apt-get update && apt-get upgrade

	# systemd require dbus
	apt-get install dbus sudo curl wget

	## Add support for installation of PHP - currently using 7.3
	apt-get -y install apt-transport-https lsb-release ca-certificates
	wget -O /etc/apt/trusted.gpg.d/php.gpg https://packages.sury.org/php/apt.gpg
	sh -c 'echo "deb https://packages.sury.org/php/ $(lsb_release -sc) main" > /etc/apt/sources.list.d/php.list'
	apt-get update

	# Because of yarn conflict
	apt-get remove cmdtest

	# dbus initilized
	dbus-uuidgen > /var/lib/dbus/machine-id

	# delay configuration install packages
	apt-get install apt-utils

	# package configuration utility
	apt-get install debconf-utils


	# tzdata
	echo 'Europe/Amsterdam' > /etc/timezone
	cp /usr/share/zoneinfo/Europe/Amsterdam /etc/localtime
	dpkg-reconfigure tzdata

	# enable root login
	echo 'root:toor' | chpasswd

	# adduser genular if user doesnt exsist
	if [ -z "$(getent passwd genular)" ]; then
		adduser --disabled-password --gecos "Debian Live User,,," genular
		echo 'genular:genular' | chpasswd
		## Add an Existing User to a Group
		usermod -a -G sudo genular
	fi

	# log
	dpkg -l > /packages.log
	debconf-get-selections > /configs.log

	# cleanup
	rm /var/lib/dbus/machine-id
	apt-get clean
__EOS__
)

if [ "$FRESH_START" == y ] ; then

	( rootfs_chroot /bin/sh << '__EOS__'
		curl -sL https://deb.nodesource.com/setup_16.x | bash -
		curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
		echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
__EOS__
	)

fi
echo "Installation of basic dependencies START"

( rootfs_chroot /bin/sh << '__EOS__'
	apt-get update

	## Install basic dependencies needed for SIMON
	echo "===> INSTALLATION step: 1"
	apt-get install nginx
	
	echo "===> INSTALLATION step: 2"
	apt-get install supervisor

	echo "===> INSTALLATION step: 3"
	apt-get install -y nodejs
	apt-get install yarn

	## For SSH login function located in User Settings
	yarn global add localtunnel

	echo "===> INSTALLATION step: 4"
	apt-get install default-jre default-jdk

	echo "===> INSTALLATION step: 5"
	## Install flock
	apt-get install util-linux

	echo "===> INSTALLATION step: 6"
	apt-get install gfortran

	echo "===> INSTALLATION step: 7"
	apt-get install openssl

	apt-get install openssh-server

	echo "===> INSTALLATION step: 8"
	apt-get install git

	echo "===> INSTALLATION step: 8.0"
	apt-get install pandoc

	## Add support for git2r
	echo "===> INSTALLATION step: 8.1"
	apt-get install libgit2-dev

	echo "===> INSTALLATION step: 9"
	apt-get install mariadb-server mariadb-client

	echo "===> INSTALLATION step: 10"
	mysqld_safe --skip-grant-tables --skip_networking &

	sleep 7

mysql --user=root <<_EOF_
	FLUSH PRIVILEGES;
	ALTER USER root@localhost IDENTIFIED VIA mysql_native_password 
	USING PASSWORD('genular');
	FLUSH PRIVILEGES;

	DELETE FROM mysql.user WHERE User='';
	DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');
	DROP DATABASE IF EXISTS test;
	DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%';
	FLUSH PRIVILEGES;
_EOF_

__EOS__
)

## Add MySQL configuration
cp "$rootfsDir/../../configs/etc/mysql/mariadb.conf.d/50-server.cnf" "$rootfsDir/etc/mysql/mariadb.conf.d/50-server.cnf"

## Add SSH configuration
cp "$rootfsDir/../../configs/etc/ssh/ssh_config" "$rootfsDir/etc/ssh/ssh_config"

echo "Installation of basic dependencies END"

mkdir -p "$rootfsDir/var/www/html"
cp "$rootfsDir/../../configs/var/www/genular-info.php" "$rootfsDir/var/www/html/genular-info.php"

cp "$rootfsDir/../../configs/etc/nginx/nginx.conf" "$rootfsDir/etc/nginx/nginx.conf"
cp "$rootfsDir/../../configs/etc/nginx/sites-available/default" "$rootfsDir/etc/nginx/sites-available/default"
cp "$rootfsDir/../../configs/etc/nginx/sites-available/genular.conf" "$rootfsDir/etc/nginx/sites-available/genular.conf"

## Add SIMON analysis CRONtab file
cp "$rootfsDir/../../configs/etc/cron.d/genular" "$rootfsDir/etc/cron.d/genular"
chmod +x "$rootfsDir/etc/cron.d/genular"
touch "$rootfsDir/var/log/cron.log"

echo "Installation of advanced dependencies START"
( rootfs_chroot /bin/sh << '__EOS__'
	
	ln -s /etc/nginx/sites-available/default /etc/nginx/sites-enabled/default
	ln -s /etc/nginx/sites-available/genular.conf /etc/nginx/sites-enabled/genular.conf

	## Change the Primary Group of a genular user
	usermod -g www-data genular
	## Display User Groups
	id genular

	apt-get update
	apt-get install vim

	## Install basic dependencies needed for SIMON
	echo "===> INSTALLATION step: 0"
	apt install build-essential libssl-dev

	echo "===> INSTALLATION step: 1"
	apt-get install libopenblas-dev

	echo "===> INSTALLATION step: 2"
	apt-get install libopencv-dev

	echo "===> INSTALLATION step: 3"
	apt-get install libssh2-1-dev

	echo "===> INSTALLATION step: 4"
	apt-get install libmariadbclient-dev

	echo "===> INSTALLATION step: 5"
	apt-get install tk tcl tcl-dev libxml2-dev unzip zip

	apt-get install libmagick++-dev

	echo "===========================================> INSTALLATION step: 6"
	apt-get install php7.3-fpm php7.3-common php7.3-cli
	echo "===========================================> php7.3-mysql"
	apt-get install php7.3-mysql
	echo "===========================================> php7.3-zip"
	apt-get install php7.3-zip
	echo "===========================================> php-xml php7.3-xml"
	apt-get install php-xml php7.3-xml
	echo "===========================================> php7.3-curl"
	apt-get install php-curl php7.3-curl
	echo "===========================================> php7.3-mbstring"
	apt-get install php-mbstring php7.3-mbstring
	echo "===========================================> php7.3-gmp"
	apt-get install php7.3-gmp
	echo "===========================================> php7.3-imagick"
	apt-get install php7.3-imagick
	echo "===========================================> php7.3-bcmath"
	apt-get install php7.3-bcmath
	echo "===========================================> php7.3-bz2"
	apt-get install php7.3-bz2
	echo "===========================================> php7.3-gd"
	apt-get install php7.3-gd
	echo "===========================================> php7.3-intl"
	apt-get install php7.3-intl
	echo "===========================================> php7.3-json"
	apt-get install php7.3-json
	echo "===========================================> php7.3-readline"
	apt-get install php7.3-readline
	echo "===========================================> php-dev7.3"
	sudo apt-get install php7.3-dev
	echo "===========================================> Enable PHP7.3 as Default"
	sudo update-alternatives --set php /usr/bin/php7.3
	sudo update-alternatives --set phar /usr/bin/phar7.3
	sudo update-alternatives --set phar.phar /usr/bin/phar.phar7.3
	sudo update-alternatives --set phpize /usr/bin/phpize7.3
	sudo update-alternatives --set php-config /usr/bin/php-config7.3

	echo "===========================================> php-dev"
	sudo apt-get install php-dev libmcrypt-dev php-pear

	sudo pecl channel-update pecl.php.net

	echo "===========================================> libsodium 1"
	apt-get install libsodium-dev
	echo "===========================================> libsodium 2"
	mkdir -p /tmp/pear/cache
	pecl install -f libsodium
	echo "===========================================> INSTALLATION step: 7 END"

	## Socket location directory
	mkdir -p "$rootfsDir/run/php"

	## Set PHP session directory permissions
	mkdir -p "/var/lib/php/sessions"
	chown -hR root:www-data /var/lib/php
	
	chmod 777 "/var/lib/php/sessions"
	chmod 776 "/var/lib/php"

	mkdir -p "$rootfsDir/var/log/nginx"
	mkdir -p "$rootfsDir/var/log/mysql"

	## Disable AppArmor 
	mkdir -p /etc/default/grub.d
	echo 'GRUB_CMDLINE_LINUX_DEFAULT="$GRUB_CMDLINE_LINUX_DEFAULT apparmor=0"' | tee /etc/default/grub.d/apparmor.cfg

	echo "===> INSTALLATION step: 7"
	## Create GENULAR mysql USER
	PASSWDDB="genular"
	MAINDB="genular"

	# If /root/.my.cnf exists then it won't ask for root password
	if [ -f /root/.my.cnf ]; then
	    mysql -e "CREATE DATABASE ${MAINDB} /*\!40100 DEFAULT CHARACTER SET utf8 */;"
	    mysql -e "CREATE USER ${MAINDB}@localhost IDENTIFIED BY '${PASSWDDB}';"
	    mysql -e "GRANT ALL PRIVILEGES ON ${MAINDB}.* TO '${MAINDB}'@'localhost';"
	    mysql -e "FLUSH PRIVILEGES;"

	# If /root/.my.cnf doesn't exist then it'll ask for root password   
	else
	    echo "Please enter root user MySQL password!"
	    read rootpasswd
	    mysql -uroot -p${rootpasswd} -e "CREATE DATABASE ${MAINDB} /*\!40100 DEFAULT CHARACTER SET utf8 */;"
	    mysql -uroot -p${rootpasswd} -e "CREATE USER ${MAINDB}@localhost IDENTIFIED BY '${PASSWDDB}';"
	    mysql -uroot -p${rootpasswd} -e "GRANT ALL PRIVILEGES ON ${MAINDB}.* TO '${MAINDB}'@'localhost';"
	    mysql -uroot -p${rootpasswd} -e "FLUSH PRIVILEGES;"
	fi

	## Lets try to install composer
	cd /tmp && curl -sS https://getcomposer.org/installer -o composer-setup.php
	php composer-setup.php --install-dir=/usr/local/bin --filename=composer


	## We will use this directory in SIMON to save data into
	mkdir "/mnt/data" && chmod 777 "/mnt/data"
	## If user mounts custom directory for data persistance we will use this one
	mkdir "/mnt/usrdata" && chmod 777 "/mnt/usrdata"

__EOS__
)
cp "$rootfsDir/../../configs/etc/php/7.3/fpm/php.ini" "$rootfsDir/etc/php/7.3/fpm/php.ini"

echo "Installation of advanced dependencies END"
# prevent upstart scripts from running during install/update
(
	set -x
	rootfs_chroot dpkg-divert --local --rename --add /sbin/initctl
	cp -a "$rootfsDir/usr/sbin/policy-rc.d" "$rootfsDir/sbin/initctl"
	sed -i 's/^exit.*/exit 0/' "$rootfsDir/sbin/initctl"
)

# Remove downloaded packages from local repository, shrink a little, since apt makes us cache-fat (wheezy: ~157.5MB vs ~120MB)
( set -x; rootfs_chroot apt-get clean )

# this file is one APT creates to make sure we don't "autoremove" our currently
# in-use kernel, which doesn't really apply to debootstraps/Docker images that
# don't even have kernels installed
rm -f "$rootfsDir/etc/apt/apt.conf.d/01autoremove-kernels"

# Ubuntu 10.04 sucks... :)
if strings "$rootfsDir/usr/bin/dpkg" | grep -q unsafe-io; then
	# force dpkg not to call sync() after package extraction (speeding up installs)
	echo >&2 "+ echo force-unsafe-io > '$rootfsDir/etc/dpkg/dpkg.cfg.d/docker-apt-speedup'"
	cat > "$rootfsDir/etc/dpkg/dpkg.cfg.d/docker-apt-speedup" <<-'EOF'
		# For most Docker users, package installs happen during "docker build", which
		# doesn't survive power loss and gets restarted clean afterwards anyhow, so
		# this minor tweak gives us a nice speedup (much nicer on spinning disks,
		# obviously).

		force-unsafe-io
	EOF
fi

if [ -d "$rootfsDir/etc/apt/apt.conf.d" ]; then
	# _keep_ us lean by effectively running "apt-get clean" after every install
	aptGetClean='"rm -f /var/cache/apt/archives/*.deb /var/cache/apt/archives/partial/*.deb /var/cache/apt/*.bin || true";'

	if [ ! -f "$rootfsDir/etc/apt/apt.conf.d/docker-clean" ]; then
		echo >&2 "+ cat > '$rootfsDir/etc/apt/apt.conf.d/docker-clean'"
		cat > "$rootfsDir/etc/apt/apt.conf.d/docker-clean" <<-EOF
			# Since for most Docker users, package installs happen in "docker build" steps,
			# they essentially become individual layers due to the way Docker handles
			# layering, especially using CoW filesystems.  What this means for us is that
			# the caches that APT keeps end up just wasting space in those layers, making
			# our layers unnecessarily large (especially since we'll normally never use
			# these caches again and will instead just "docker build" again and make a brand
			# new image).

			# Ideally, these would just be invoking "apt-get clean", but in our testing,
			# that ended up being cyclic and we got stuck on APT's lock, so we get this fun
			# creation that's essentially just "apt-get clean".
			DPkg::Post-Invoke { ${aptGetClean} };
			APT::Update::Post-Invoke { ${aptGetClean} };

			Dir::Cache::pkgcache "";
			Dir::Cache::srcpkgcache "";

			# Note that we do realize this isn't the ideal way to do this, and are always
			# open to better suggestions (https://github.com/docker/docker/issues).
		EOF
	fi

	if [ ! -f "$rootfsDir/etc/apt/apt.conf.d/docker-no-languages" ]; then
		# remove apt-cache translations for fast "apt-get update"
		echo >&2 "+ echo Acquire::Languages 'none' > '$rootfsDir/etc/apt/apt.conf.d/docker-no-languages'"
		cat > "$rootfsDir/etc/apt/apt.conf.d/docker-no-languages" <<-'EOF'
			# In Docker, we don't often need the "Translations" files, so we're just wasting
			# time and space by downloading them, and this inhibits that.  For users that do
			# need them, it's a simple matter to delete this file and "apt-get update". :)

			Acquire::Languages "none";
		EOF
	fi

	if [ ! -f "$rootfsDir/etc/apt/apt.conf.d/docker-gzip-indexes" ]; then
		echo >&2 "+ echo Acquire::GzipIndexes 'true' > '$rootfsDir/etc/apt/apt.conf.d/docker-gzip-indexes'"
		cat > "$rootfsDir/etc/apt/apt.conf.d/docker-gzip-indexes" <<-'EOF'
			# Since Docker users using "RUN apt-get update && apt-get install -y ..." in
			# their Dockerfiles don't go delete the lists files afterwards, we want them to
			# be as small as possible on-disk, so we explicitly request "gz" versions and
			# tell Apt to keep them gzipped on-disk.

			# For comparison, an "apt-get update" layer without this on a pristine
			# "debian:wheezy" base image was "29.88 MB", where with this it was only
			# "8.273 MB".

			Acquire::GzipIndexes "true";
			Acquire::CompressionTypes::Order:: "gz";
		EOF
	fi

	if [ ! -f "$rootfsDir/etc/apt/apt.conf.d/docker-autoremove-suggests" ]; then
		# update "autoremove" configuration to be aggressive about removing suggests deps that weren't manually installed
		echo >&2 "+ echo Apt::AutoRemove::SuggestsImportant 'false' > '$rootfsDir/etc/apt/apt.conf.d/docker-autoremove-suggests'"
		cat > "$rootfsDir/etc/apt/apt.conf.d/docker-autoremove-suggests" <<-'EOF'
			# Since Docker users are looking for the smallest possible final images, the
			# following emerges as a very common pattern:

			#   RUN apt-get update \
			#       && apt-get install -y <packages> \
			#       && <do some compilation work> \
			#       && apt-get purge -y --auto-remove <packages>

			# By default, APT will actually _keep_ packages installed via Recommends or
			# Depends if another package Suggests them, even and including if the package
			# that originally caused them to be installed is removed.  Setting this to
			# "false" ensures that APT is appropriately aggressive about removing the
			# packages it added.

			# https://aptitude.alioth.debian.org/doc/en/ch02s05s05.html#configApt-AutoRemove-SuggestsImportant
			Apt::AutoRemove::SuggestsImportant "false";
		EOF
	fi
fi

(
	set -x

	# make sure we're fully up-to-date
	rootfs_chroot sh -xc 'apt-get update && apt-get dist-upgrade -y'

	# Remove downloaded package lists.
	# delete all the apt list files since they're big and get stale quickly
	find "$rootfsDir/var/lib/apt/lists/" -maxdepth 2 -type f -delete
	# this forces "apt-get update" in dependent images, which is also good

	mkdir -p "$rootfsDir/var/lib/apt/lists/partial" # Lucid... "E: Lists directory /var/lib/apt/lists/partial is missing."
	
	if [ ! -f "$rootfsDir/home/genular/install_dependencies.sh" ]; then
		sudo cp "$rootfsDir/../../../../installation/install_dependencies.sh" "$rootfsDir/home/genular/install_dependencies.sh"
		sudo chmod +x "$rootfsDir/home/genular/install_dependencies.sh"
	fi
)

if [ -f "$rootfsDir/home/genular/install_dependencies.sh" ]; then

	echo "Installing SIMON deps START"
	(	set -x 
		rootfs_chroot /bin/bash  /home/genular/install_dependencies.sh $GITHUB_PAT
	)
	## Docker specific : adjust permissions
	( rootfs_chroot /bin/sh << '__EOS__'
		chown -hR genular:www-data "/var/www/genular"
__EOS__
	)
	echo "Installing SIMON deps END"

fi

# Docker mounts tmpfs at /dev and procfs at /proc so we can remove them
sudo rm -rf "$rootfsDir/dev"
sudo rm -rf "$rootfsDir/proc"
sudo mkdir -p "$rootfsDir/dev"
sudo mkdir -p "$rootfsDir/proc"
